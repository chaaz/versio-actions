---
# DO NOT EDIT
# Created from template "release.yml".
name: release
"on":
  - workflow_dispatch
env:
  RUSTFLAGS: "-D warnings"
  GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  GITHUB_USER: "${{ github.actor }}"
jobs:
  project-matrixes:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    outputs:
      cargo-matrix: "${{ steps.find-cargo-matrix.outputs.matrix }}"
      all-matrix: "${{ steps.find-all-matrix.outputs.matrix }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get versio
        uses: chaaz/versio-actions/install@v1.1
      - name: Find cargo matrix
        id: find-cargo-matrix
        run: "echo \"::set-output name=matrix::{\\\"include\\\":$(versio -l none info -l cargo -R -N)}\""
      - name: Find all matrix
        id: find-all-matrix
        run: "echo \"::set-output name=matrix::{\\\"include\\\":$(versio -l none info -a -R -N)}\""
  versio-checks:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get versio
        uses: chaaz/versio-actions/install@v1.1
      - name: Fetch history
        run: git fetch --unshallow
      - name: Check projects
        run: versio check
      - name: Output plan
        run: versio plan
  cargo-checks:
    needs: project-matrixes
    runs-on: ubuntu-latest
    strategy:
      matrix: "${{ fromJson(needs.project-matrixes.outputs.cargo-matrix) }}"
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    defaults:
      run:
        working-directory: "${{ matrix.root }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get cargo stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
      - name: Get cargo nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
      - name: Find paths
        id: cargo-find-paths
        run: "echo ::set-output name=cargo-lock-glob::\"${{ matrix.root }}\"/**/Cargo.lock"
      - name: Cache cargo and target
        uses: actions/cache@v1
        with:
          path: "~/.cargo/registry\n~/.cargo/git\n${{ matrix.root }}/target\n"
          key: "${{ runner.os }}-cargo-${{ hashFiles(steps.cargo-find-paths.outputs.cargo-lock-glob) }}"
      - name: Check structure
        run: cargo clippy
      - name: Check format
        run: cargo +nightly fmt -- --check
      - name: Check tests
        run: cargo test
  versio-release:
    needs:
      - cargo-checks
      - versio-checks
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get versio
        uses: chaaz/versio-actions/install@v1.1
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libgpg-error-dev libgpgme-dev
      - name: Get cargo stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Cache cargo
        uses: actions/cache@v1
        with:
          path: "~/.cargo/registry\n~/.cargo/git\n"
          key: "${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}"
      - name: Fetch history
        run: git fetch --unshallow
      - name: Generate release
        run: versio release
  cratesio-publish:
    needs:
      - project-matrixes
      - versio-release
    runs-on: ubuntu-latest
    strategy:
      matrix: "${{fromJson(needs.project-matrixes.outputs.cargo-matrix)}}"
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    defaults:
      run:
        working-directory: "${{ matrix.root }}"
    steps:
      - name: Checkout release
        uses: actions/checkout@v2
        with:
          ref: main
      - name: Get cargo stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
      - name: Get cargo nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
      - name: Find paths
        id: cargo-find-paths
        run: "echo ::set-output name=cargo-lock-glob::\"${{ matrix.root }}\"/**/Cargo.lock"
      - name: Cache cargo and target
        uses: actions/cache@v1
        with:
          path: "~/.cargo/registry\n~/.cargo/git\n${{ matrix.root }}/target\n"
          key: "${{ runner.os }}-cargo-${{ hashFiles(steps.cargo-find-paths.outputs.cargo-lock-glob) }}"
      - name: Login to crates.io
        run: "cargo login ${CRATES_IO_TOKEN}"
        env:
          CRATES_IO_TOKEN: "${{ secrets.CRATES_IO_TOKEN }}"
      - name: Publish to crates.io
        run: cargo publish
  github-publish:
    needs: versio-release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    outputs:
      upload_url: "${{ steps.publish-to-github.outputs.upload_url }}"
    steps:
      - name: Checkout release
        uses: actions/checkout@v2
        with:
          ref: main
      - name: Get versio
        uses: chaaz/versio-actions/install@v1.1
      - name: Find version
        id: find-version
        run: "echo ::set-output name=version::$(versio -l none info -i 0 -F | jq -r '.[0].full_version')"
      - name: Publish to GitHub
        id: publish-to-github
        uses: actions/create-release@v1
        with:
          tag_name: "${{ steps.find-version.outputs.version }}"
          release_name: "(TODO) RELEASE FOR ${{ steps.find-version.outputs.version }}"
          body: "(TODO) SUMMARY\n- (TODO) FEATURE1\n\nNew to the Yambler? The [repository](https://github.com/chaaz/versio-actions/tree/main/yambler) is the best place to learn about the Yambler and what it can do. If you want to report a bug or request a feature, you can do so at our [Issues](https://github.com/chaaz/versio-actions/issues) link, but we ask you first read the [Troubleshooting](https://github.com/chaaz/versio-actions/blob/main/docs/troubleshooting.md) page learn about problems and their solutions.\n\nTo install, follow the instructions for your platform; some files might be zipped for improved download speed. For example, on MacOS you can do something like this (assuming `~/bin` exists and is in your PATH):\n\n```sh\ncurl -L https://github.com/chaaz/versio-actions/releases/download/${{ steps.find-version.outputs.version }}/yambler__x86_64-apple-darwin -o ~/bin/yambler\nchmod +x ~/bin/yambler\n```\n\n**MacOS:** download `yambler__x86_64-apple-darwin`, copy to `yambler` in your PATH.\n**GNU Linux 64:** download `yambler__x86_64-unknown-linux-gnu`, copy to `yambler` in your PATH.\n**Windows:** download `yambler__x86_64-pc-win32.exe`, copy to `yambler.exe` in your %PATH.\n"
          draft: true
          prerelease: false
          commitish: main
  github-publish-bins:
    needs: github-publish
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            root: yambler
            rustflags: "-D warnings -C link-args=-s"
            bin_name: yambler
          - os: macos-latest
            target: x86_64-apple-darwin
            root: yambler
            rustflags: "-D warnings"
            bin_name: yambler
          - os: windows-latest
            target: x86_64-pc-win32.exe
            root: yambler
            rustflags: "-D warnings"
            bin_name: yambler.exe
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: "${{ matrix.os }}"
    steps:
      - name: Checkout release
        uses: actions/checkout@v2
        with:
          ref: main
      - name: Get cargo stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
      - name: Get cargo nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
      - name: Find paths
        id: cargo-find-paths
        run: "echo ::set-output name=cargo-lock-glob::\"${{ matrix.root }}\"/**/Cargo.lock"
      - name: Cache cargo and target
        uses: actions/cache@v1
        with:
          path: "~/.cargo/registry\n~/.cargo/git\n${{ matrix.root }}/target\n"
          key: "${{ runner.os }}-cargo-${{ hashFiles(steps.cargo-find-paths.outputs.cargo-lock-glob) }}"
      - name: Build binary
        run: cargo build --release
        working-directory: "${{ matrix.root }}"
        env:
          RUSTFLAGS: "${{ matrix.rustflags }}"
      - name: Upload binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: "${{ needs.github-publish.outputs.upload_url }}"
          asset_path: "${{ matrix.root }}/target/release/${{ matrix.bin_name }}"
          asset_name: "yambler__${{ matrix.target }}"
          asset_content_type: application/octet-stream